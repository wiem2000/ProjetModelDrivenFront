@using ProjetModelDrivenFront.Models
@{
    var apps = ViewBag.Apps as List<App>;
    ViewData["Title"] = "Bienvenue";
}

<section class="bg-gradient-to-r from-[#742774] via-black to-[#FFCC00] bg-fixed w-full min-h-full relative overflow-hidden">

    <!-- Animated Background Elements -->
    <div class="absolute inset-0">
        <div class="absolute top-20 left-20 w-72 h-72 bg-[#742774] opacity-20 rounded-full mix-blend-multiply filter blur-xl animate-pulse"></div>
        <div class="absolute top-40 right-20 w-72 h-72 bg-[#FFCC00] opacity-20 rounded-full mix-blend-multiply filter blur-xl animate-pulse delay-1000"></div>
        <div class="absolute -bottom-8 left-40 w-72 h-72 bg-[#742774] opacity-20 rounded-full mix-blend-multiply filter blur-xl animate-pulse delay-2000"></div>
    </div>

    <!-- Fixed Sidebar -->
    <aside class="fixed left-6 top-32 bottom-6 w-80 z-50">
        <div class="h-full bg-black/90 backdrop-blur-xl rounded-3xl shadow-2xl border border-[#FFCC00]/30 p-6 flex flex-col">
            <!-- Logo/Header -->
            <div class="flex items-center mb-8 pb-6 border-b border-[#FFCC00]/30">
                <div class="w-12 h-12 bg-gradient-to-r from-[#742774] to-[#FFCC00] rounded-xl mr-4 flex items-center justify-center shadow-lg">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                </div>
                <div>
                    <h1 class="text-xl font-bold text-[#FFCC00]">Mon Dashboard</h1>
                    <p class="text-sm text-[#FFCC00]/80">Gestion d'applications</p>
                </div>
            </div>

            <!-- Navigation -->
            <nav class="flex-1 space-y-2">
                <a href="#" class="group flex items-center gap-4 text-[#FFCC00] hover:text-white hover:bg-gradient-to-r hover:from-[#742774]/20 hover:to-[#FFCC00]/10 px-4 py-4 rounded-2xl transition-all duration-300 transform hover:scale-[1.02] border border-[#742774]/20">
                    <div class="w-12 h-12 bg-gradient-to-br from-[#742774] to-[#FFCC00] rounded-xl flex items-center justify-center group-hover:from-[#FFCC00] group-hover:to-[#742774] transition-all duration-300 shadow-lg">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" d="M9 8h10M9 12h10M9 16h10M4.99 8H5m-.02 4h.01m0 4H5" />
                        </svg>
                    </div>
                    <div class="flex-1">
                        <span class="font-semibold text-base">Mes Applications</span>
                        <p class="text-xs text-[#FFCC00]/80 group-hover:text-gray-300">Voir toutes les apps</p>
                    </div>
                </a>

                <a href="#" class="group flex items-center gap-4 text-[#FFCC00]/80 hover:text-[#FFCC00] hover:bg-gradient-to-r hover:from-[#742774]/20 hover:to-[#FFCC00]/10 px-4 py-4 rounded-2xl transition-all duration-300 transform hover:scale-[1.02] border border-transparent hover:border-[#742774]/20">
                    <div class="w-12 h-12 bg-[#742774]/20 rounded-xl flex items-center justify-center group-hover:bg-gradient-to-br group-hover:from-[#742774] group-hover:to-[#FFCC00] transition-all duration-300 shadow-lg">
                        <svg class="w-6 h-6 text-[#FFCC00]/80 group-hover:text-white" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14m-7 7V5" />
                        </svg>
                    </div>
                    <div class="flex-1">
                        <span class="font-semibold text-base">Créer une application</span>
                        <p class="text-xs text-[#FFCC00]/60 group-hover:text-[#FFCC00]/80">Nouvelle app</p>
                    </div>
                </a>

                <a href="#" class="group flex items-center gap-4 text-[#FFCC00]/80 hover:text-[#FFCC00] hover:bg-gradient-to-r hover:from-[#742774]/20 hover:to-[#FFCC00]/10 px-4 py-4 rounded-2xl transition-all duration-300 transform hover:scale-[1.02] border border-transparent hover:border-[#742774]/20">
                    <div class="w-12 h-12 bg-[#742774]/20 rounded-xl flex items-center justify-center group-hover:bg-gradient-to-br group-hover:from-[#742774] group-hover:to-[#FFCC00] transition-all duration-300 shadow-lg">
                        <svg class="w-6 h-6 text-[#FFCC00]/80 group-hover:text-white" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path d="M11.083 5.104c.35-.8 1.485-.8 1.834 0l1.752 4.022a1 1 0 0 0 .84.597l4.463.342c.9.069 1.255 1.2.556 1.771l-3.33 2.723a1 1 0 0 0-.337 1.016l1.03 4.119c.214.858-.71 1.552-1.474 1.106l-3.913-2.281a1 1 0 0 0-1.008 0L7.583 20.8c-.764.446-1.688-.248-1.474-1.106l1.03-4.119A1 1 0 0 0 6.8 14.56l-3.33-2.723c-.698-.571-.342-1.702.557-1.771l4.462-.342a1 1 0 0 0 .84-.597l1.753-4.022Z" />
                        </svg>
                    </div>
                    <div class="flex-1">
                        <span class="font-semibold text-base">Applications favorites</span>
                        <p class="text-xs text-[#FFCC00]/60 group-hover:text-[#FFCC00]/80">Apps préférées</p>
                    </div>
                </a>

                <a href="/Admin/Panel?tab=config" class="group flex items-center gap-4 text-[#FFCC00]/80 hover:text-[#FFCC00] hover:bg-gradient-to-r hover:from-[#742774]/20 hover:to-[#FFCC00]/10 px-4 py-4 rounded-2xl transition-all duration-300 transform hover:scale-[1.02] border border-transparent hover:border-[#742774]/20">
                    <div class="w-12 h-12 bg-[#742774]/20 rounded-xl flex items-center justify-center group-hover:bg-gradient-to-br group-hover:from-[#742774] group-hover:to-[#FFCC00] transition-all duration-300 shadow-lg">
                        <svg class="w-6 h-6 text-[#FFCC00]/80 group-hover:text-white" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M21 13v-2a1 1 0 0 0-1-1h-.757l-.707-1.707.535-.536a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0l-.536.535L14 4.757V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v.757l-1.707.707-.536-.535a1 1 0 0 0-1.414 0L4.929 6.343a1 1 0 0 0 0 1.414l.536.536L4.757 10H4a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h.757l.707 1.707-.535.536a1 1 0 0 0 0 1.414l1.414 1.414a1 1 0 0 0 1.414 0l.536-.535 1.707.707V20a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-.757l1.707-.708.536.536a1 1 0 0 0 1.414 0l1.414-1.414a1 1 0 0 0 0-1.414l-.535-.536.707-1.707H20a1 1 0 0 0 1-1Z" />
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
                        </svg>
                    </div>
                    <div class="flex-1">
                        <span class="font-semibold text-base">Paramètres</span>
                        <p class="text-xs text-[#FFCC00]/60 group-hover:text-[#FFCC00]/80">Configuration</p>
                    </div>
                </a>
            </nav>
        </div>
    </aside>

    <!-- Main Content with Left Margin -->
    <main data-aos="fade-up" class="ml-96 relative z-10 p-6 pt-6 mt-32">
        <div class="min-h-screen">
            <!-- Header -->
            <div class="bg-black/90 backdrop-blur-xl rounded-3xl shadow-2xl border border-[#FFCC00]/30 mb-8 overflow-hidden">
                <div class="bg-gradient-to-r from-[#742774] via-black to-[#FFCC00] p-8">
                    <div class="flex items-center justify-between">
                        <div>
                            <h2 class="text-4xl font-bold text-white mb-2">Gérer mes applications</h2>
                            <p class="text-white/80 text-lg">Découvrez et organisez vos applications avec style</p>
                        </div>
                        <button class="bg-black/30 backdrop-blur-lg hover:bg-[#742774]/50 text-white hover:text-[#FFCC00] px-8 py-4 rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105 border border-[#FFCC00]/30 text-lg flex items-center">
                            <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            Nouvelle App
                        </button>
                    </div>
                </div>
            </div>

            <div class="bg-black/90 backdrop-blur-xl rounded-3xl shadow-2xl border border-[#FFCC00]/30 overflow-hidden">

                <!-- Search Section -->
                <div class="p-8 border-b border-[#742774]/30">
                    <div class="flex flex-wrap items-center justify-between gap-4 mb-6">
                        <h3 class="text-2xl font-bold text-[#FFCC00]">Rechercher une application</h3>

                        <div class="flex items-center gap-4">
                            <!-- View Toggle Buttons -->
                            <div class="flex bg-[#742774]/20 p-1 rounded-xl border border-[#FFCC00]/20">
                                <button id="cardViewBtn" onclick="toggleView('card')" class="view-toggle-btn active px-4 py-2 rounded-lg text-sm font-semibold transition-all duration-300 flex items-center gap-2">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                                    </svg>
                                    Cartes
                                </button>
                                <button id="listViewBtn" onclick="toggleView('list')" class="view-toggle-btn px-4 py-2 rounded-lg text-sm font-semibold transition-all duration-300 flex items-center gap-2">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                                    </svg>
                                    Liste
                                </button>
                            </div>

                            <!-- Filter Buttons -->
                            <div class="flex items-center gap-2">
                                <button onclick="filterApps('all')" class="filter-btn active px-4 py-2 rounded-xl text-sm font-semibold bg-gradient-to-r from-[#742774] to-[#FFCC00] text-white transition-all duration-300 hover:shadow-lg">
                                    Toutes
                                </button>
                                <button onclick="filterApps('active')" class="filter-btn px-4 py-2 rounded-xl text-sm font-semibold bg-[#742774]/20 text-white hover:bg-green-500 hover:text-white border border-[#742774]/30 transition-all duration-300">
                                    Actives
                                </button>
                                <button onclick="filterApps('development')" class="filter-btn px-4 py-2 rounded-xl text-sm font-semibold bg-[#742774]/20 text-white hover:bg-blue-500 hover:text-white border border-[#742774]/30 transition-all duration-300">
                                    En développement
                                </button>
                                <button onclick="filterApps('paused')" class="filter-btn px-4 py-2 rounded-xl text-sm font-semibold bg-[#742774]/20 text-white hover:bg-yellow-500 hover:text-white border border-[#742774]/30 transition-all duration-300">
                                    En pause
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Search Input -->
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-6 flex items-center pointer-events-none">
                            <svg class="h-6 w-6 text-[#FFCC00]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </div>
                        <input type="text"
                               id="searchInput"
                               placeholder="Rechercher par nom d'application..."
                               class="w-full pl-14 pr-14 py-4 bg-[#742774]/10 border border-[#742774]/30 rounded-2xl text-lg text-white placeholder-[#FFCC00]/70 focus:outline-none focus:ring-2 focus:ring-[#FFCC00] focus:border-transparent transition-all duration-300 focus:bg-[#742774]/20"
                               oninput="searchApps()">
                        <!-- Clear Button -->
                        <button id="clearSearch"
                                onclick="clearSearch()"
                                class="absolute inset-y-0 right-0 pr-6 flex items-center text-[#FFCC00] hover:text-white transition-colors duration-200 hidden">
                            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>

                    <!-- Search Results Counter -->
                    <div id="searchResults" class="mt-4 text-sm text-[#FFCC00]/80 hidden">
                        <span class="text-[#FFCC00] font-semibold" id="resultsCount">0</span> application(s) trouvée(s)
                    </div>
                </div>

                <!-- Card View Container -->
                <div id="cardViewContainer" class="p-8">
                    <div id="applicationsGrid" class="grid gap-8 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3">

                        <!-- dynamic apps -->
                        @foreach (var app in apps)
                        {
                            var status = app.Status?.ToLower();
                            var badgeColor = status switch
                            {
                                "Success" => "from-green-400 to-green-500 text-white",
                                "Fail" => "from-red-400 to-red-500 text-white",
                               
                                _ => "from-gray-400 to-gray-500 text-white"
                            };

                            <div class="app-card group relative bg-gradient-to-br from-[#742774]/20 to-black/60 backdrop-blur-sm rounded-3xl shadow-xl border border-[#742774]/30 p-6 hover:shadow-2xl hover:border-[#FFCC00]/40 hover:from-[#742774]/30 hover:to-black/70 transition-all duration-500 transform hover:-translate-y-2 hover:scale-105 overflow-hidden"
                                 data-name="@app.Title" data-status="@status" data-date="@app.CreatedAt.ToString("yyyy-MM-dd")">

                                <button onclick="toggleFavorite(this)" class="absolute top-4 right-4 z-10 p-2 @(app.IsFavorite ? "text-[#FFCC00]" : "text-[#FFCC00]/50") hover:text-[#FFCC00] transition-all duration-300 transform hover:scale-125">
                                    <svg class="w-6 h-6 fill-current drop-shadow-lg" viewBox="0 0 24 24">
                                        <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                                    </svg>
                                </button>

                                <div class="relative z-10 w-16 h-16 bg-gradient-to-br from-[#742774] via-black to-[#FFCC00] rounded-2xl flex items-center justify-center mb-6 group-hover:from-[#FFCC00] group-hover:via-black group-hover:to-[#742774] transition-all duration-500 shadow-lg">
                                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                    </svg>
                                </div>

                                <div class="relative z-10">
                                    <h3 class="app-name text-xl font-bold text-[#FFCC00] mb-2 group-hover:text-white transition-colors duration-300
            truncate w-full block whitespace-nowrap overflow-hidden"
                                        title="@app.Title">
                                        @app.Title
                                    </h3>
                                    <p class="text-white/70 text-sm mb-4 group-hover:text-white/90">Créée le @app.CreatedAt.ToString("dd/MM/yyyy")</p>

                                    <div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r @badgeColor mb-6">
                                        <div class="w-2 h-2 rounded-full mr-2 animate-pulse bg-white/80"></div>
                                        @app.Status
                                    </div>

                                    <a href="@app.AppUrl" class="inline-flex items-center text-[#FFCC00] font-semibold hover:text-white transition-all duration-300 group-hover:translate-x-2" target="_blank">
                                        Voir l'application
                                        <svg class="w-4 h-4 ml-2 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
                                        </svg>
                                    </a>
                                </div>
                            </div>
                        }

                        <!-- end dynamics apps -->

                    </div>
                </div>

                <!-- List View Container -->
                <div id="listViewContainer" class="p-8 hidden">
                    <div class="overflow-hidden rounded-2xl border border-[#742774]/30">
                        <table class="min-w-full divide-y divide-[#742774]/30">
                            <thead class="bg-gradient-to-r from-[#742774]/30 to-black/50">
                                <tr>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-[#FFCC00] uppercase tracking-wider">Favoris</th>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-[#FFCC00] uppercase tracking-wider">Application</th>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-[#FFCC00] uppercase tracking-wider">Date de création</th>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-[#FFCC00] uppercase tracking-wider">Statut</th>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-[#FFCC00] uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="listViewBody" class="bg-gradient-to-br from-[#742774]/10 to-black/30 divide-y divide-[#742774]/30">
                                <!-- List items will be generated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- No Results Message -->
                <div id="noResults" class="hidden text-center py-16">
                    <div class="w-24 h-24 bg-gradient-to-br from-[#742774]/30 to-black/20 rounded-full flex items-center justify-center mx-auto mb-6">
                        <svg class="w-12 h-12 text-[#FFCC00]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                    <h3 class="text-xl font-semibold text-[#FFCC00] mb-2">Aucune application trouvée</h3>
                    <p class="text-white/70">Essayez de modifier votre recherche ou vos filtres</p>
                </div>
            </div>
        </div>
    </main>
</section>

@section Scripts {
    <script>
        let currentFilter = 'all';
        let currentView = 'card';

        function toggleFavorite(button) {
            button.classList.toggle("text-[#FFCC00]");
            button.classList.toggle("text-[#FFCC00]/50");

            // If in list view, also update the star in the list
            if (currentView === 'list') {
                const appCard = button.closest('.app-card') || button.closest('tr');
                const appName = appCard.getAttribute('data-name');

                if (currentView === 'card') {
                    // Find the corresponding row in list view
                    const listRow = document.querySelector(`tr[data-name="${appName}"]`);
                    if (listRow) {
                        const listStar = listRow.querySelector('.favorite-star');
                        listStar.classList.toggle("text-[#FFCC00]");
                        listStar.classList.toggle("text-[#FFCC00]/50");
                    }
                } else {
                    // Find the corresponding card in card view
                    const cardItem = document.querySelector(`.app-card[data-name="${appName}"]`);
                    if (cardItem) {
                        const cardStar = cardItem.querySelector('button');
                        cardStar.classList.toggle("text-[#FFCC00]");
                        cardStar.classList.toggle("text-[#FFCC00]/50");
                    }
                }
            }

            // Tu peux ajouter ici un appel API pour sauvegarder l'état "favori"
        }

        function searchApps() {
            const searchInput = document.getElementById('searchInput');
            const searchTerm = searchInput.value.toLowerCase().trim();
            const clearButton = document.getElementById('clearSearch');
            const searchResults = document.getElementById('searchResults');
            const resultsCount = document.getElementById('resultsCount');
            const noResults = document.getElementById('noResults');
            const appCards = document.querySelectorAll('.app-card');
            const listRows = document.querySelectorAll('#listViewBody tr');

            // Show/hide clear button
            if (searchTerm.length > 0) {
                clearButton.classList.remove('hidden');
                searchResults.classList.remove('hidden');
            } else {
                clearButton.classList.add('hidden');
                searchResults.classList.add('hidden');
            }

            let visibleCount = 0;

            // Filter cards in card view
            appCards.forEach(card => {
                const appName = card.getAttribute('data-name').toLowerCase();
                const appStatus = card.getAttribute('data-status');

                // Check if app matches search term and current filter
                const matchesSearch = searchTerm === '' || appName.includes(searchTerm);
                const matchesFilter = currentFilter === 'all' || appStatus === currentFilter;

                if (matchesSearch && matchesFilter) {
                    card.style.display = 'block';
                    visibleCount++;

                    // Highlight search term
                    const appNameElement = card.querySelector('.app-name');
                    const originalName = card.getAttribute('data-name');

                    if (searchTerm && matchesSearch) {
                        const highlightedName = originalName.replace(
                            new RegExp(searchTerm, 'gi'),
                            match => `<mark class="bg-[#FFCC00]/30 text-black px-1 rounded">${match}</mark>`
                        );
                        appNameElement.innerHTML = highlightedName;
                    } else {
                        appNameElement.textContent = originalName;
                    }
                } else {
                    card.style.display = 'none';
                }
            });

            // Filter rows in list view
            listRows.forEach(row => {
                const appName = row.getAttribute('data-name').toLowerCase();
                const appStatus = row.getAttribute('data-status');

                // Check if app matches search term and current filter
                const matchesSearch = searchTerm === '' || appName.includes(searchTerm);
                const matchesFilter = currentFilter === 'all' || appStatus === currentFilter;

                if (matchesSearch && matchesFilter) {
                    row.style.display = '';

                    // Highlight search term
                    const appNameElement = row.querySelector('.app-name');
                    const originalName = row.getAttribute('data-name');

                    if (searchTerm && matchesSearch) {
                        const highlightedName = originalName.replace(
                            new RegExp(searchTerm, 'gi'),
                            match => `<mark class="bg-[#FFCC00]/30 text-black px-1 rounded">${match}</mark>`
                        );
                        appNameElement.innerHTML = highlightedName;
                    } else {
                        appNameElement.textContent = originalName;
                    }
                } else {
                    row.style.display = 'none';
                }
            });

            // Update results count
            resultsCount.textContent = visibleCount;

            // Show/hide no results message
            if (visibleCount === 0 && (searchTerm.length > 0 || currentFilter !== 'all')) {
                noResults.classList.remove('hidden');
            } else {
                noResults.classList.add('hidden');
            }
        }

        function clearSearch() {
            const searchInput = document.getElementById('searchInput');
            searchInput.value = '';
            searchApps();
            searchInput.focus();
        }

        function filterApps(status) {
            currentFilter = status;

            // Update filter button styles
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');
                btn.classList.add('bg-[#742774]/20', 'text-white');
            });

            event.target.classList.remove('bg-[#742774]/20', 'text-white');
            event.target.classList.add('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');

            // Re-run search with new filter
            searchApps();
        }

        function toggleView(viewType) {
            currentView = viewType;

            // Update view toggle button styles
            document.querySelectorAll('.view-toggle-btn').forEach(btn => {
                btn.classList.remove('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');
                btn.classList.add('text-[#FFCC00]/70');
            });

            if (viewType === 'card') {
                document.getElementById('cardViewBtn').classList.add('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');
                document.getElementById('cardViewBtn').classList.remove('text-[#FFCC00]/70');
                document.getElementById('cardViewContainer').classList.remove('hidden');
                document.getElementById('listViewContainer').classList.add('hidden');
            } else {
                document.getElementById('listViewBtn').classList.add('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');
                document.getElementById('listViewBtn').classList.remove('text-[#FFCC00]/70');
                document.getElementById('listViewContainer').classList.remove('hidden');
                document.getElementById('cardViewContainer').classList.add('hidden');

                // Generate list view content if it's empty
                generateListView();
            }

            // Re-run search to apply filters
            searchApps();
        }

        function generateListView() {
            const listViewBody = document.getElementById('listViewBody');
            const appCards = document.querySelectorAll('.app-card');

            // Clear existing content
            listViewBody.innerHTML = '';

            // Generate list rows from cards
            appCards.forEach(card => {
                const appName = card.getAttribute('data-name');
                const appStatus = card.getAttribute('data-status');
                const appDate = card.getAttribute('data-date');
                const isFavorite = card.querySelector('button').classList.contains('text-[#FFCC00]');

                // Create status badge based on status
                let statusBadge = '';
                if (appStatus === 'active') {
                    statusBadge = `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-green-400 to-green-500 text-white">
                                    <div class="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                                    Active
                                </span>`;
                } else if (appStatus === 'development') {
                    statusBadge = `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                    <div class="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                                    En développement
                                </span>`;
                } else if (appStatus === 'paused') {
                    statusBadge = `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-yellow-400 to-yellow-500 text-white">
                                    <div class="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                                    En pause
                                </span>`;
                }

                // Create row
                const row = document.createElement('tr');
                row.setAttribute('data-name', appName);
                row.setAttribute('data-status', appStatus);
                row.classList.add('hover:bg-[#742774]/5', 'transition-colors', 'duration-200');

                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <button onclick="toggleFavorite(this)" class="favorite-star p-2 ${isFavorite ? 'text-[#FFCC00]' : 'text-[#FFCC00]/50'} hover:text-[#FFCC00] transition-colors duration-200">
                            <svg class="w-6 h-6 fill-current" viewBox="0 0 24 24">
                                <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                            </svg>
                        </button>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 h-10 w-10 bg-gradient-to-br from-[#742774] via-black to-[#FFCC00] rounded-lg flex items-center justify-center text-white font-bold">
                                ${appName.charAt(0)}
                            </div>
                            <div class="ml-4">
                                <div class="app-name text-sm font-medium text-[#FFCC00]">${appName}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-white/70">${appDate}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        ${statusBadge}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <a href="#" class="text-[#FFCC00] hover:text-white transition-colors duration-200 flex items-center justify-end">
                            Voir l'application
                            <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
                            </svg>
                        </a>
                    </td>
                `;

                listViewBody.appendChild(row);
            });
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Set default view
            toggleView('card');

            // Initialize search
            searchApps();
        });

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl/Cmd + K to focus search
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                document.getElementById('searchInput').focus();
            }

            // Escape to clear search
            if (e.key === 'Escape') {
                clearSearch();
            }

            // Ctrl/Cmd + 1 for card view
            if ((e.ctrlKey || e.metaKey) && e.key === '1') {
                e.preventDefault();
                toggleView('card');
            }

            // Ctrl/Cmd + 2 for list view
            if ((e.ctrlKey || e.metaKey) && e.key === '2') {
                e.preventDefault();
                toggleView('list');
            }
        });
    </script>
}