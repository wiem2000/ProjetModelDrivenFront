@using ProjetModelDrivenFront.Models

@{
    var apps = ViewBag.Apps as List<App>;
    ViewData["Title"] = "Mes Applications";
}

<!-- Professional Dashboard Section - Homogeneous Design -->
<section class="relative min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 overflow-hidden">
    <!-- Animated Background Elements -->
    <div class="absolute inset-0">
        <!-- EY Logo Background -->
        <div class="absolute inset-0 flex items-center justify-center opacity-5">
            <img src="/videos/logo.gif" alt="EY Logo Background" class="w-96 h-96 object-contain animate-pulse" />
        </div>
        <!-- Subtle grid pattern -->
        <div class="absolute inset-0 opacity-[0.03]" style="background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.3) 1px, transparent 0); background-size: 40px 40px;"></div>
        <!-- Floating orbs with blur effect -->
        <div class="absolute top-20 right-1/4 w-72 h-72 bg-gradient-to-r from-[#742774]/20 to-[#FFCC00]/20 rounded-full blur-3xl animate-pulse"></div>
        <div class="absolute bottom-32 left-1/4 w-96 h-96 bg-gradient-to-r from-[#FFCC00]/15 to-[#742774]/15 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <!-- Geometric accent lines -->
        <div class="absolute top-1/3 left-0 w-full h-px bg-gradient-to-r from-transparent via-[#742774]/30 to-transparent"></div>
        <div class="absolute bottom-1/3 left-0 w-full h-px bg-gradient-to-r from-transparent via-[#FFCC00]/30 to-transparent"></div>
    </div>

    <!-- Fixed Professional Sidebar with Glass Effect -->
    <aside class="fixed left-6 top-32 bottom-6 w-80 z-50">
        <div class="h-full bg-white/10 backdrop-blur-xl rounded-2xl shadow-2xl border border-white/20 overflow-hidden">
            <!-- Logo/Header -->
            <div class="p-6 bg-gradient-to-r from-[#742774]/20 to-[#FFCC00]/20 border-b border-white/20">
                <div class="flex items-center">
                    <div class="w-10 h-10 rounded-lg bg-gradient-to-r from-[#742774] to-[#FFCC00] flex items-center justify-center text-white mr-3 shadow-lg">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-lg font-bold text-white">Mon Dashboard</h1>
                        <p class="text-sm text-white/80">Gestion d'applications</p>
                    </div>
                </div>
            </div>
            <!-- Navigation -->
            <nav class="p-4 space-y-2">
                <a href="/AppGenerator/Apps" class="group flex items-center gap-3 p-4 rounded-xl hover:bg-white/10 transition-all duration-300 bg-gradient-to-r from-[#742774]/20 to-[#FFCC00]/20 border border-white/20">
                    <div class="w-10 h-10 rounded-lg bg-gradient-to-r from-[#742774] to-[#FFCC00] flex items-center justify-center text-white shadow-lg">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" d="M9 8h10M9 12h10M9 16h10M4.99 8H5m-.02 4h.01m0 4H5" />
                        </svg>
                    </div>
                    <div class="flex-1">
                        <span class="font-semibold text-white">Mes Applications</span>
                        <p class="text-xs text-white/70">Voir toutes les apps</p>
                    </div>
                </a>
                <a href="/AppGenerator/Index" class="group flex items-center gap-3 p-4 rounded-xl hover:bg-white/10 transition-all duration-300">
                    <div class="w-10 h-10 rounded-lg bg-white/20 flex items-center justify-center text-white group-hover:bg-gradient-to-r group-hover:from-[#742774] group-hover:to-[#FFCC00] transition-all duration-300">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14m-7 7V5" />
                        </svg>
                    </div>
                    <div class="flex-1">
                        <span class="font-semibold text-white">Créer une application</span>
                        <p class="text-xs text-white/70">Nouvelle app</p>
                    </div>
                </a>
                <a href="#" onclick="filterApps('favorites')" class="group flex items-center gap-3 p-4 rounded-xl hover:bg-white/10 transition-all duration-300">
                    <div class="w-10 h-10 rounded-lg bg-white/20 flex items-center justify-center text-white group-hover:bg-gradient-to-r group-hover:from-[#742774] group-hover:to-[#FFCC00] transition-all duration-300">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path d="M11.083 5.104c.35-.8 1.485-.8 1.834 0l1.752 4.022a1 1 0 0 0 .84.597l4.463.342c.9.069 1.255 1.2.556 1.771l-3.33 2.723a1 1 0 0 0-.337 1.016l1.03 4.119c.214.858-.71 1.552-1.474 1.106l-3.913-2.281a1 1 0 0 0-1.008 0L7.583 20.8c-.764.446-1.688-.248-1.474-1.106l1.03-4.119A1 1 0 0 0 6.8 14.56l-3.33-2.723c-.698-.571-.342-1.702.557-1.771l4.462-.342a1 1 0 0 0 .84-.597l1.753-4.022Z" />
                        </svg>
                    </div>
                    <div class="flex-1">
                        <span class="font-semibold text-white">Applications favorites</span>
                        <p class="text-xs text-white/70">Apps préférées</p>
                    </div>
                </a>
             
            </nav>
        </div>
    </aside>

    <!-- Main Content with Glass Effect -->
    <main data-aos="fade-up" class="ml-96 relative z-10 p-6 pt-6 mt-32">
        <div class="min-h-screen">
           

            <div class="bg-white/10 backdrop-blur-xl rounded-2xl shadow-2xl border border-white/20 overflow-hidden">
                <!-- Search Section -->
                <div class="p-8 border-b border-white/20">
                    <div class="flex flex-wrap items-center justify-between gap-4 mb-6">
                        <h3 class="text-2xl font-bold text-white">Gérer mes applications Model-Driven</h3>
                        <div class="flex items-center gap-4">
                            <!-- View Toggle Buttons -->
                            <div class="flex bg-white/10 backdrop-blur-sm p-1 rounded-xl border border-white/20">
                                <button id="cardViewBtn" onclick="toggleView('card')" class="view-toggle-btn active px-4 py-2 rounded-lg text-sm font-semibold transition-all duration-300 flex items-center gap-2 bg-gradient-to-r from-[#742774] to-[#FFCC00] text-white">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                                    </svg>
                                    Cartes
                                </button>
                                <button id="listViewBtn" onclick="toggleView('list')" class="view-toggle-btn px-4 py-2 rounded-lg text-sm font-semibold transition-all duration-300 flex items-center gap-2 text-white/70 hover:bg-white/10">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                                    </svg>
                                    Liste
                                </button>
                            </div>
                            <!-- Filter Buttons -->
                            <div class="flex items-center gap-2">
                               
                                <button onclick="filterApps('Success')" class="filter-btn active px-4 py-2 rounded-xl text-sm font-semibold bg-white/10 text-white hover:bg-green-500 hover:text-white border border-white/20 transition-all duration-300">
                                    Actives
                                </button>
                               
                                <button onclick="filterApps('Archived')" class="filter-btn px-4 py-2 rounded-xl text-sm font-semibold bg-white/10 text-white hover:bg-yellow-500 hover:text-white border border-white/20 transition-all duration-300">
                                    Archivées
                                </button>
                                <button onclick="filterApps('favorites')" class="filter-btn px-4 py-2 rounded-xl text-sm font-semibold bg-white/10 text-white hover:bg-[#FFCC00] hover:text-black border border-white/20 transition-all duration-300">
                                    Favoris
                                </button>
                                <button onclick="filterApps('all')" class="filter-btn  px-4 py-2 rounded-xl text-sm font-semibold bg-gradient-to-r from-[#742774] to-[#FFCC00] text-white transition-all duration-300 hover:shadow-lg">
                                    Toutes
                                </button>
                            </div>
                        </div>
                    </div>
                    <!-- Search Input -->
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </div>
                        <input type="text"
                               id="searchInput"
                               placeholder="Rechercher par nom d'application..."
                               class="w-full pl-12 pr-12 py-4 bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl text-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-[#FFCC00] focus:border-transparent transition-all duration-300 focus:bg-white/20"
                               oninput="searchApps()">
                        <!-- Clear Button -->
                        <button id="clearSearch"
                                onclick="clearSearch()"
                                class="absolute inset-y-0 right-0 pr-4 flex items-center text-white/60 hover:text-white transition-colors duration-200 hidden">
                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    <!-- Search Results Counter -->
                    <div id="searchResults" class="mt-4 text-sm text-white/70 hidden">
                        <span class="text-[#FFCC00] font-semibold" id="resultsCount">0</span> application(s) trouvée(s)
                    </div>
                </div>

                <!-- Card View Container -->
                <div id="cardViewContainer" class="p-8">
                    <div id="applicationsGrid" class="grid gap-6 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3">
                        <!-- dynamic apps -->
                        @foreach (var app in apps)
                        {
                            var status = app.Status?.ToLower();
                            var badgeColor = status switch
                            {
                                "success" => "from-green-400 to-green-500 text-white",
                               
                                "archived" => "from-yellow-400 to-yellow-500 text-white",
                                _ => "from-gray-400 to-gray-500 text-white"
                            };

                            <div class="app-card group relative bg-white/10 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-6 hover:bg-white/20 hover:border-[#FFCC00]/40 transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl"
                                 data-id="@app.Id" data-name="@app.Title" data-status="@status" data-date="@app.CreatedAt.ToString("yyyy-MM-dd")" data-favorite="@app.IsFavorite.ToString().ToLower()">

                                <!-- Actions Menu -->
                                <div class="absolute top-4 right-4 z-10 flex items-center gap-2">
                                    <!-- Favorite Button -->
                                    <button onclick="toggleFavorite('@app.Id', this)" class="p-2 @(app.IsFavorite ? "text-[#FFCC00]" : "text-white/50") hover:text-[#FFCC00] transition-all duration-300 hover:scale-110" title="@(app.IsFavorite ? "Retirer des favoris" : "Ajouter aux favoris")">
                                        <svg class="w-5 h-5 fill-current drop-shadow-lg" viewBox="0 0 24 24">
                                            <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                                        </svg>
                                    </button>

                                    <!-- Archive/Unarchive Button -->
                                    @if (app.Status?.ToLower() == "archived")
                                    {
                                        <button onclick="unarchiveApp('@app.Id', this)" class="p-2 text-yellow-400 hover:text-yellow-300 transition-all duration-300 hover:scale-110" title="Désarchiver">
                                        

                                                 <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5m8.25 3v6.75m0 0-3-3m3 3 3-3M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z" />
                                            </svg>

                                        </button>
                                    }
                                    else
                                    {
                                        <button onclick="archiveApp('@app.Id', this)" class="p-2 text-white/50 hover:text-yellow-400 transition-all duration-300 hover:scale-110" title="Archiver">
                                         
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5m8.25 3v6.75m0 0-3-3m3 3 3-3M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z" />
                                            </svg>

                                       
                                        
                                        </button>
                                    }
                                </div>

                                <div class="w-12 h-12 bg-gradient-to-r from-[#742774] to-[#FFCC00] rounded-xl flex items-center justify-center mb-4 group-hover:scale-105 transition-transform duration-300 shadow-lg">
                                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                    </svg>
                                </div>

                                <div>
                                    <h3 class="app-name text-lg font-bold text-white mb-2 group-hover:text-[#FFCC00] transition-colors duration-300 truncate"
                                        title="@app.Title">
                                        @app.Title
                                        @if (app.IsFavorite)
                                        {
                                            <span class="ml-2 text-[#FFCC00] text-sm">⭐</span>
                                        }
                                    </h3>
                                    <p class="text-white/70 text-sm mb-4 group-hover:text-white/90">Créée le @app.CreatedAt.ToString("dd/MM/yyyy")</p>
                                    <div class="flex items-center justify-end gap-3">
                                        <!-- Badge de statut -->
                                        <div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold mb-0 bg-gradient-to-r @badgeColor shadow-sm">
                                            <div class="w-2 h-2 rounded-full mr-2 bg-white/80 animate-pulse"></div>
                                            @(app.Status == "Success" ? "Active" : app.Status == "Fail" ? "Échouée" : app.Status == "Archived" ? "Archivée" : app.Status)
                                        </div>

                                        <!-- Icône œil + lien -->
                                        <a asp-controller="AppGenerator"
                                           asp-action="GraphFromDb"
                                           asp-route-appId="@app.Id"
                                           class="flex items-center gap-1 text-[#FFCC00] text-xs font-medium hover:text-white transition-colors duration-200">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                      d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                            </svg>
                                            <span>Voir la conception</span>
                                        </a>

                                    </div>



                                    @if (app.Status?.ToLower() != "archived")
                                    {
                                        <div class="flex flex-col gap-3 mt-4">
                                          

                                            <!-- Bouton Voir la conception -->
                                            <a href ="@app.AppUrl"
                                               class="group inline-flex items-center justify-center px-6 py-3 bg-white/10 backdrop-blur-sm border-2 border-white/30 text-white font-semibold rounded-xl hover:bg-black/20 hover:border-[#FFCC00]/50 hover:text-[#FFCC00] transition-all duration-300 relative overflow-hidden">
                                                <!-- Effet de brillance -->
                                                <div class="absolute inset-0 bg-gradient-to-r from-transparent via-[#FFCC00]/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
                                                <svg class="w-5 h-5 mr-3 transition-transform group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                                </svg>
                                                <span class="relative z-10">Ouvrir l'application</span>
                                                <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1 relative z-10" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                                                </svg>
                                            </a>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center text-white/50 font-semibold">
                                            Application archivée
                                        </span>
                                    }
                                </div>
                            </div>
                        }
                        <!-- end dynamics apps -->
                    </div>
                </div>

                <!-- List View Container -->
                <div id="listViewContainer" class="p-8 hidden">
                    <div class="overflow-hidden rounded-xl border border-white/20 bg-white/5 backdrop-blur-sm">
                        <table class="min-w-full divide-y divide-white/20">
                            <thead class="bg-gradient-to-r from-[#742774]/20 to-[#FFCC00]/20">
                                <tr>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-white/80 uppercase tracking-wider">Favoris</th>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-white/80 uppercase tracking-wider">Application</th>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-white/80 uppercase tracking-wider">Date de création</th>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-white/80 uppercase tracking-wider">Statut</th>
                                    <th scope="col" class="px-6 py-4 text-left text-xs font-medium text-white/80 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="listViewBody" class="divide-y divide-white/20">
                                <!-- List items will be generated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- No Results Message -->
                <div id="noResults" class="hidden text-center py-16">
                    <div class="w-16 h-16 bg-white/10 backdrop-blur-sm rounded-full flex items-center justify-center mx-auto mb-4 border border-white/20">
                        <svg class="w-8 h-8 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                    <h3 class="text-lg font-semibold text-white mb-2">Aucune application trouvée</h3>
                    <p class="text-white/70">Essayez de modifier votre recherche ou vos filtres</p>
                </div>
            </div>
        </div>
    </main>




</section>



@section Scripts {
    <script>
        let currentFilter = 'Success';
        let currentView = 'card';

        // Toggle favorite status
        async function toggleFavorite(appId, button) {
            try {
                const response = await fetch('/AppGenerator/ToggleFavorite', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ appId: appId })
                });

                if (response.ok) {
                    const result = await response.json();

                    // Update button appearance
                    const card = button.closest('.app-card');
                    card.setAttribute('data-favorite', result.isFavorite.toString());

                    if (result.isFavorite) {
                        button.classList.remove("text-white/50");
                        button.classList.add("text-[#FFCC00]");
                        button.setAttribute('title', 'Retirer des favoris');

                        // Add star to title
                        const titleElement = card.querySelector('.app-name');
                        if (!titleElement.querySelector('.text-\\[\\#FFCC00\\]')) {
                            titleElement.innerHTML += '<span class="ml-2 text-[#FFCC00] text-sm">⭐</span>';
                        }
                    } else {
                        button.classList.remove("text-[#FFCC00]");
                        button.classList.add("text-white/50");
                        button.setAttribute('title', 'Ajouter aux favoris');

                        // Remove star from title
                        const starElement = card.querySelector('.app-name .text-\\[\\#FFCC00\\]');
                        if (starElement) {
                            starElement.remove();
                        }
                    }

                    // Show notification
                    showNotification(
                        result.isFavorite ? 'Application ajoutée aux favoris ⭐' : 'Application retirée des favoris',
                        'success'
                    );

                    // Update corresponding element in other view
                    updateCorrespondingView(appId, 'favorite', result.isFavorite);
                } else {
                    throw new Error('Erreur lors de la mise à jour');
                }
            } catch (error) {
                console.error('Error toggling favorite:', error);
                showNotification('Erreur lors de la mise à jour des favoris', 'error');
            }
        }

        // Archive application
        async function archiveApp(appId, button) {
            if (!confirm('Êtes-vous sûr de vouloir archiver cette application ?')) {
                return;
            }

            try {
                const response = await fetch('/AppGenerator/ArchiveApp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ appId: appId })
                });

                if (response.ok) {
                    const result = await response.json();

                    // Update the card
                    const card = button.closest('.app-card');
                    updateAppCard(card, 'archived');

                    // Show notification
                    showNotification('Application archivée avec succès 📦', 'success');

                    // Refresh the view
                    searchApps();
                } else {
                    throw new Error('Erreur lors de l\'archivage');
                }
            } catch (error) {
                console.error('Error archiving app:', error);
                showNotification('Erreur lors de l\'archivage', 'error');
            }
        }

        // Unarchive application
        async function unarchiveApp(appId, button) {
            try {
                const response = await fetch('/AppGenerator/UnarchiveApp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ appId: appId })
                });

                if (response.ok) {
                    const result = await response.json();

                    // Update the card
                    const card = button.closest('.app-card');
                    updateAppCard(card, result.newStatus);

                    // Show notification
                    showNotification('Application désarchivée avec succès ✅', 'success');

                    // Refresh the view
                    searchApps();
                } else {
                    throw new Error('Erreur lors du désarchivage');
                }
            } catch (error) {
                console.error('Error unarchiving app:', error);
                showNotification('Erreur lors du désarchivage', 'error');
            }
        }

        // Update app card appearance
        function updateAppCard(card, newStatus) {
            // Update data attribute
            card.setAttribute('data-status', newStatus.toLowerCase());

            // Update status badge
            const statusBadge = card.querySelector('.inline-flex.items-center');
            const statusText = statusBadge.lastChild;

            // Remove old classes and add new ones
            statusBadge.className = 'inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold mb-4 shadow-sm bg-gradient-to-r ';

            if (newStatus.toLowerCase() === 'archived') {
                statusBadge.classList.add('from-yellow-400', 'to-yellow-500', 'text-white');
                statusText.textContent = 'Archivée';

                // Hide the app link and show archived message
                const appLink = card.querySelector('a[target="_blank"]');
                const archivedMessage = card.querySelector('.inline-flex.items-center.text-white\\/50');

                if (appLink) {
                    appLink.style.display = 'none';
                }
                if (!archivedMessage) {
                    const newArchivedMessage = document.createElement('span');
                    newArchivedMessage.className = 'inline-flex items-center text-white/50 font-semibold';
                    newArchivedMessage.textContent = 'Application archivée';
                    card.querySelector('div:last-child').appendChild(newArchivedMessage);
                }
            } else {
                // Restore to active status
                statusBadge.classList.add('from-green-400', 'to-green-500', 'text-white');
                statusText.textContent = 'Active';

                // Show the app link and hide archived message
                const appLink = card.querySelector('a[target="_blank"]');
                const archivedMessage = card.querySelector('.inline-flex.items-center.text-white\\/50');

                if (appLink) {
                    appLink.style.display = 'inline-flex';
                }
                if (archivedMessage) {
                    archivedMessage.remove();
                }
            }

            // Update action buttons
            updateActionButtons(card, newStatus);
        }

        // Update action buttons based on status
        function updateActionButtons(card, status) {
            const actionsContainer = card.querySelector('.absolute.top-4.right-4');
            const archiveBtn = actionsContainer.querySelector('button[onclick*="archive"]');

            if (status.toLowerCase() === 'archived') {
                // Replace archive button with unarchive button
                archiveBtn.setAttribute('onclick', `unarchiveApp('${card.getAttribute('data-id')}', this)`);
                archiveBtn.setAttribute('title', 'Désarchiver');
                archiveBtn.className = 'p-2 text-yellow-400 hover:text-yellow-300 transition-all duration-300 hover:scale-110';
                archiveBtn.innerHTML = `
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18" />
                    </svg>
                `;
            } else {
                // Replace unarchive button with archive button
                archiveBtn.setAttribute('onclick', `archiveApp('${card.getAttribute('data-id')}', this)`);
                archiveBtn.setAttribute('title', 'Archiver');
                archiveBtn.className = 'p-2 text-white/50 hover:text-yellow-400 transition-all duration-300 hover:scale-110';
                archiveBtn.innerHTML = `
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8l6 6 6-6" />
                    </svg>
                `;
            }
        }

        // Update corresponding view (when switching between card and list view)
        function updateCorrespondingView(appId, action, value) {
            // This function would update the corresponding element in the other view
            // Implementation depends on your specific needs
        }

        function searchApps() {
            const searchInput = document.getElementById('searchInput');
            const searchTerm = searchInput.value.toLowerCase().trim();
            const clearButton = document.getElementById('clearSearch');
            const searchResults = document.getElementById('searchResults');
            const resultsCount = document.getElementById('resultsCount');
            const noResults = document.getElementById('noResults');
            const appCards = document.querySelectorAll('.app-card');
            const listRows = document.querySelectorAll('#listViewBody tr');

            // Show/hide clear button
            if (searchTerm.length > 0) {
                clearButton.classList.remove('hidden');
                searchResults.classList.remove('hidden');
            } else {
                clearButton.classList.add('hidden');
                searchResults.classList.add('hidden');
            }

            let visibleCount = 0;

            // Filter cards in card view
            appCards.forEach(card => {
                const appName = card.getAttribute('data-name').toLowerCase();
                const appStatus = card.getAttribute('data-status');
                const isFavorite = card.getAttribute('data-favorite') === 'true';

                // Check if app matches search term and current filter
                const matchesSearch = searchTerm === '' || appName.includes(searchTerm);
                let matchesFilter = false;

                if (currentFilter === 'all') {
                    matchesFilter = true;
                } else if (currentFilter === 'favorites') {
                    matchesFilter = isFavorite;
                } else {
                    matchesFilter = appStatus === currentFilter.toLowerCase();
                }

                if (matchesSearch && matchesFilter) {
                    card.style.display = 'block';
                    visibleCount++;
                    // Highlight search term
                    const appNameElement = card.querySelector('.app-name');
                    const originalName = card.getAttribute('data-name');
                    if (searchTerm && matchesSearch) {
                        const highlightedName = originalName.replace(
                            new RegExp(searchTerm, 'gi'),
                            match => `<mark class="bg-[#FFCC00]/30 text-black px-1 rounded">${match}</mark>`
                        );
                        appNameElement.innerHTML = highlightedName + (isFavorite ? '<span class="ml-2 text-[#FFCC00] text-sm">⭐</span>' : '');
                    } else {
                        appNameElement.innerHTML = originalName + (isFavorite ? '<span class="ml-2 text-[#FFCC00] text-sm">⭐</span>' : '');
                    }
                } else {
                    card.style.display = 'none';
                }
            });

            // Update results count
            resultsCount.textContent = visibleCount;

            // Show/hide no results message
            if (visibleCount === 0 && (searchTerm.length > 0 || currentFilter !== 'all')) {
                noResults.classList.remove('hidden');
            } else {
                noResults.classList.add('hidden');
            }
        }

        function clearSearch() {
            const searchInput = document.getElementById('searchInput');
            searchInput.value = '';
            searchApps();
            searchInput.focus();
        }

        function filterApps(status) {
            currentFilter = status;
            // Update filter button styles
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');
                btn.classList.add('bg-white/10', 'text-white');
            });

            event.target.classList.remove('bg-white/10', 'text-white');
            event.target.classList.add('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');

            // Re-run search with new filter
            searchApps();
        }

        function toggleView(viewType) {
            currentView = viewType;
            // Update view toggle button styles
            document.querySelectorAll('.view-toggle-btn').forEach(btn => {
                btn.classList.remove('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');
                btn.classList.add('text-white/70');
            });

            if (viewType === 'card') {
                document.getElementById('cardViewBtn').classList.add('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');
                document.getElementById('cardViewBtn').classList.remove('text-white/70');
                document.getElementById('cardViewContainer').classList.remove('hidden');
                document.getElementById('listViewContainer').classList.add('hidden');
            } else {
                document.getElementById('listViewBtn').classList.add('active', 'bg-gradient-to-r', 'from-[#742774]', 'to-[#FFCC00]', 'text-white');
                document.getElementById('listViewBtn').classList.remove('text-white/70');
                document.getElementById('listViewContainer').classList.remove('hidden');
                document.getElementById('cardViewContainer').classList.add('hidden');
                // Generate list view content if it's empty
                generateListView();
            }

            // Re-run search to apply filters
            searchApps();
        }

        function generateListView() {
            const listViewBody = document.getElementById('listViewBody');
            const appCards = document.querySelectorAll('.app-card');

            // Clear existing content
            listViewBody.innerHTML = '';

            // Generate list rows from cards
            appCards.forEach(card => {
                const appId = card.getAttribute('data-id');
                const appName = card.getAttribute('data-name');
                const appStatus = card.getAttribute('data-status');
                const appDate = card.getAttribute('data-date');
                const isFavorite = card.getAttribute('data-favorite') === 'true';

                // Create status badge based on status
                let statusBadge = '';
                if (appStatus === 'success') {
                    statusBadge = `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-green-400 to-green-500 text-white">
                                    <div class="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                                    Active
                                </span>`;
                } else if (appStatus === 'fail') {
                    statusBadge = `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-red-400 to-red-500 text-white">
                                    <div class="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                                    Échouée
                                </span>`;
                } else if (appStatus === 'archived') {
                    statusBadge = `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-yellow-400 to-yellow-500 text-white">
                                    <div class="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                                    Archivée
                                </span>`;
                }

                // Create row
                const row = document.createElement('tr');
                row.setAttribute('data-id', appId);
                row.setAttribute('data-name', appName);
                row.setAttribute('data-status', appStatus);
                row.setAttribute('data-favorite', isFavorite.toString());
                row.classList.add('hover:bg-white/5', 'transition-colors', 'duration-200');

                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <button onclick="toggleFavorite('${appId}', this)" class="favorite-star p-2 ${isFavorite ? 'text-[#FFCC00]' : 'text-white/50'} hover:text-[#FFCC00] transition-colors duration-200">
                            <svg class="w-6 h-6 fill-current" viewBox="0 0 24 24">
                                <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                            </svg>
                        </button>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 h-10 w-10 bg-gradient-to-br from-[#742774] via-black to-[#FFCC00] rounded-lg flex items-center justify-center text-white font-bold">
                                ${appName.charAt(0)}
                            </div>
                            <div class="ml-4">
                                <div class="app-name text-sm font-medium text-[#FFCC00]">${appName} ${isFavorite ? '⭐' : ''}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-white/70">${appDate}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        ${statusBadge}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div class="flex items-center justify-end gap-2">
                            ${appStatus !== 'archived' ?
                                `<a href="#" class="text-[#FFCC00] hover:text-white transition-colors duration-200 flex items-center">
                                    Voir l'application
                                    <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
                                    </svg>
                                </a>` :
                                '<span class="text-white/50">Application archivée</span>'
                            }
                            ${appStatus === 'archived' ?
                                `<button onclick="unarchiveApp('${appId}', this)" class="p-2 text-yellow-400 hover:text-yellow-300 transition-all duration-300" title="Désarchiver">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18" />
                                    </svg>
                                </button>` :
                                `<button onclick="archiveApp('${appId}', this)" class="p-2 text-white/50 hover:text-yellow-400 transition-all duration-300" title="Archiver">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 8l6 6 6-6" />
                                    </svg>
                                </button>`
                            }
                        </div>
                    </td>
                `;

                listViewBody.appendChild(row);
            });
        }

        // Simple notification function
        function showNotification(message, type) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-xl shadow-lg transition-all duration-300 transform translate-x-full ${
                type === 'success' ? 'bg-green-500/90 text-white' : 'bg-red-500/90 text-white'
            } backdrop-blur-sm border border-white/20`;
            notification.textContent = message;

            // Add to DOM
            document.body.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);

            // Remove after 3 seconds
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Set default view
            toggleView('card');
            // Initialize search
            searchApps();
        });

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl/Cmd + K to focus search
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                document.getElementById('searchInput').focus();
            }
            // Escape to clear search
            if (e.key === 'Escape') {
                clearSearch();
            }
            // Ctrl/Cmd + 1 for card view
            if ((e.ctrlKey || e.metaKey) && e.key === '1') {
                e.preventDefault();
                toggleView('card');
            }
            // Ctrl/Cmd + 2 for list view
            if ((e.ctrlKey || e.metaKey) && e.key === '2') {
                e.preventDefault();
                toggleView('list');
            }
        });
    </script>
}
